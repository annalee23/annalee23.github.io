{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport MyApplications from '@/components/MyApplications.vue';\nimport MyAccounts from '@/components/MyAccounts.vue';\nimport OrderDetails from '@/components/OrderDetails.vue';\nexport default {\n  data() {\n    return {\n      activeTab: 0,\n      tabs: [{\n        label: 'Заявки',\n        component: MyApplications,\n        path: '/application'\n      }, {\n        label: 'Счета',\n        component: MyAccounts,\n        path: '/accounts'\n      }]\n    };\n  },\n  methods: {\n    navigateToOrder(item) {\n      const existingTabIndex = this.tabs.findIndex(tab => tab.label.includes(item.num));\n      if (existingTabIndex !== -1) {\n        this.activeTab = existingTabIndex;\n      } else {\n        this.tabs.push({\n          label: 'Заявка ' + item.num,\n          component: OrderDetails,\n          path: '/application/' + item.orderId\n        });\n        this.activeTab = this.tabs.length - 1;\n        this.$router.push({\n          path: this.tabs[this.activeTab].path\n        });\n      }\n    },\n    updateActiveTabBasedOnRoute() {\n      const currentPath = this.$route.path;\n      const tabIndex = this.tabs.findIndex(tab => currentPath === tab.path);\n      if (tabIndex !== -1) {\n        this.activeTab = tabIndex;\n      } else {\n        const match = currentPath.match(/^\\/application\\/(\\d+)/);\n        if (match) {\n          //const orderId = match[1];\n          const label = 'Заявка ';\n          const existingOrderTabIndex = this.tabs.findIndex(tab => tab.label === label);\n          if (existingOrderTabIndex === -1) {\n            this.tabs.push({\n              label: label,\n              component: OrderDetails,\n              path: currentPath\n            });\n            this.activeTab = this.tabs.length - 1;\n          } else {\n            this.activeTab = existingOrderTabIndex;\n          }\n        }\n      }\n    },\n    redirectToStartRoute() {\n      this.$router.push('/application');\n    }\n  },\n  watch: {\n    activeTab(newVal) {\n      const selectedTab = this.tabs[newVal];\n      if (selectedTab && selectedTab.path && this.$route.path !== selectedTab.path) {\n        this.$router.push({\n          path: selectedTab.path\n        });\n      }\n    }\n  },\n  mounted() {\n    window.addEventListener('beforeunload', this.redirectToStartRoute);\n  },\n  beforeUnmount() {\n    window.removeEventListener('beforeunload', this.redirectToStartRoute);\n  }\n};","map":{"version":3,"names":["MyApplications","MyAccounts","OrderDetails","data","activeTab","tabs","label","component","path","methods","navigateToOrder","item","existingTabIndex","findIndex","tab","includes","num","push","orderId","length","$router","updateActiveTabBasedOnRoute","currentPath","$route","tabIndex","match","existingOrderTabIndex","redirectToStartRoute","watch","newVal","selectedTab","mounted","window","addEventListener","beforeUnmount","removeEventListener"],"sources":["src/components/AppTabs.vue"],"sourcesContent":["<template>\n  <v-app>\n    <div class=\"mx-16\">\n      <v-tabs v-model=\"activeTab\" background-color=\"transparent\" color=\"basil\" grow>\n        <v-tab v-for=\"tab in tabs\" :key=\"tab.label\">{{ tab.label }}</v-tab>\n      </v-tabs>\n\n      <v-tabs-items v-model=\"activeTab\">\n        <v-tab-item v-for=\"(tab, index) in tabs\" :key=\"index\">\n          <component :is=\"tab.component\" :data=\"tab.data\" @select-order=\"navigateToOrder\" />\n        </v-tab-item>\n      </v-tabs-items>\n    </div>\n  </v-app>\n</template>\n\n<script>\nimport MyApplications from '@/components/MyApplications.vue';\nimport MyAccounts from '@/components/MyAccounts.vue';\nimport OrderDetails from '@/components/OrderDetails.vue';\n\n\nexport default {\n  data() {\n    return {\n      activeTab: 0,\n      tabs: [\n        { label: 'Заявки', component: MyApplications, path: '/application' },\n        { label: 'Счета', component: MyAccounts, path: '/accounts' }\n      ],\n    };\n  },\n  methods: {\n    navigateToOrder(item) {\n      const existingTabIndex = this.tabs.findIndex(tab => tab.label.includes(item.num));\n      if (existingTabIndex !== -1) {\n        this.activeTab = existingTabIndex;\n      } else {\n        this.tabs.push({ label: 'Заявка ' + item.num, component: OrderDetails, path: '/application/' + item.orderId });\n        this.activeTab = this.tabs.length - 1;\n        this.$router.push({ path: this.tabs[this.activeTab].path });\n      }\n    },\n    updateActiveTabBasedOnRoute() {\n      const currentPath = this.$route.path;\n      const tabIndex = this.tabs.findIndex(tab => currentPath === tab.path);\n      if (tabIndex !== -1) {\n        this.activeTab = tabIndex;\n      } else {\n        const match = currentPath.match(/^\\/application\\/(\\d+)/);\n        if (match) {\n          //const orderId = match[1];\n          const label = 'Заявка ';\n          const existingOrderTabIndex = this.tabs.findIndex(tab => tab.label === label);\n          if (existingOrderTabIndex === -1) {\n            this.tabs.push({ label: label, component: OrderDetails, path: currentPath });\n            this.activeTab = this.tabs.length - 1;\n          } else {\n            this.activeTab = existingOrderTabIndex;\n          }\n        }\n      }\n    },\n    redirectToStartRoute() {\n      this.$router.push('/application');\n    }\n  },\n  watch: {\n    activeTab(newVal) {\n      const selectedTab = this.tabs[newVal];\n      if (selectedTab && selectedTab.path && this.$route.path !== selectedTab.path) {\n        this.$router.push({ path: selectedTab.path });\n      }\n    }\n  },\n  mounted() {\n    window.addEventListener('beforeunload', this.redirectToStartRoute);\n  },\n  beforeUnmount() {\n    window.removeEventListener('beforeunload', this.redirectToStartRoute);\n  }\n};\n</script>"],"mappings":";AAiBA,OAAAA,cAAA;AACA,OAAAC,UAAA;AACA,OAAAC,YAAA;AAGA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,IAAA,GACA;QAAAC,KAAA;QAAAC,SAAA,EAAAP,cAAA;QAAAQ,IAAA;MAAA,GACA;QAAAF,KAAA;QAAAC,SAAA,EAAAN,UAAA;QAAAO,IAAA;MAAA;IAEA;EACA;EACAC,OAAA;IACAC,gBAAAC,IAAA;MACA,MAAAC,gBAAA,QAAAP,IAAA,CAAAQ,SAAA,CAAAC,GAAA,IAAAA,GAAA,CAAAR,KAAA,CAAAS,QAAA,CAAAJ,IAAA,CAAAK,GAAA;MACA,IAAAJ,gBAAA;QACA,KAAAR,SAAA,GAAAQ,gBAAA;MACA;QACA,KAAAP,IAAA,CAAAY,IAAA;UAAAX,KAAA,cAAAK,IAAA,CAAAK,GAAA;UAAAT,SAAA,EAAAL,YAAA;UAAAM,IAAA,oBAAAG,IAAA,CAAAO;QAAA;QACA,KAAAd,SAAA,QAAAC,IAAA,CAAAc,MAAA;QACA,KAAAC,OAAA,CAAAH,IAAA;UAAAT,IAAA,OAAAH,IAAA,MAAAD,SAAA,EAAAI;QAAA;MACA;IACA;IACAa,4BAAA;MACA,MAAAC,WAAA,QAAAC,MAAA,CAAAf,IAAA;MACA,MAAAgB,QAAA,QAAAnB,IAAA,CAAAQ,SAAA,CAAAC,GAAA,IAAAQ,WAAA,KAAAR,GAAA,CAAAN,IAAA;MACA,IAAAgB,QAAA;QACA,KAAApB,SAAA,GAAAoB,QAAA;MACA;QACA,MAAAC,KAAA,GAAAH,WAAA,CAAAG,KAAA;QACA,IAAAA,KAAA;UACA;UACA,MAAAnB,KAAA;UACA,MAAAoB,qBAAA,QAAArB,IAAA,CAAAQ,SAAA,CAAAC,GAAA,IAAAA,GAAA,CAAAR,KAAA,KAAAA,KAAA;UACA,IAAAoB,qBAAA;YACA,KAAArB,IAAA,CAAAY,IAAA;cAAAX,KAAA,EAAAA,KAAA;cAAAC,SAAA,EAAAL,YAAA;cAAAM,IAAA,EAAAc;YAAA;YACA,KAAAlB,SAAA,QAAAC,IAAA,CAAAc,MAAA;UACA;YACA,KAAAf,SAAA,GAAAsB,qBAAA;UACA;QACA;MACA;IACA;IACAC,qBAAA;MACA,KAAAP,OAAA,CAAAH,IAAA;IACA;EACA;EACAW,KAAA;IACAxB,UAAAyB,MAAA;MACA,MAAAC,WAAA,QAAAzB,IAAA,CAAAwB,MAAA;MACA,IAAAC,WAAA,IAAAA,WAAA,CAAAtB,IAAA,SAAAe,MAAA,CAAAf,IAAA,KAAAsB,WAAA,CAAAtB,IAAA;QACA,KAAAY,OAAA,CAAAH,IAAA;UAAAT,IAAA,EAAAsB,WAAA,CAAAtB;QAAA;MACA;IACA;EACA;EACAuB,QAAA;IACAC,MAAA,CAAAC,gBAAA,sBAAAN,oBAAA;EACA;EACAO,cAAA;IACAF,MAAA,CAAAG,mBAAA,sBAAAR,oBAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}