{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport MyApplications from '@/components/MyApplications.vue';\nimport MyAccounts from '@/components/MyAccounts.vue';\nimport OrderDetails from '@/components/OrderDetails.vue';\nexport default {\n  data() {\n    return {\n      activeTab: 0,\n      tabs: [{\n        label: 'Заявки',\n        component: MyApplications,\n        path: '/application'\n      }, {\n        label: 'Счета',\n        component: MyAccounts,\n        path: '/accounts'\n      }]\n    };\n  },\n  methods: {\n    navigateToOrder(item) {\n      const existingTabIndex = this.tabs.findIndex(tab => tab.label.includes(item.num));\n      if (existingTabIndex !== -1) {\n        this.activeTab = existingTabIndex;\n      } else {\n        this.tabs.push({\n          label: 'Заявка ' + item.num,\n          component: OrderDetails,\n          path: '/application/' + item.orderId\n        });\n        this.activeTab = this.tabs.length - 1;\n      }\n    },\n    updateActiveTabBasedOnRoute() {\n      const currentPath = this.$route.path;\n      const tabIndex = this.tabs.findIndex(tab => tab.path === currentPath);\n      if (tabIndex !== -1) {\n        this.activeTab = tabIndex;\n      }\n    }\n  },\n  watch: {\n    activeTab(newVal) {\n      const selectedTab = this.tabs[newVal];\n      if (selectedTab && selectedTab.path && this.$route.path !== selectedTab.path) {\n        this.$router.push({\n          path: selectedTab.path\n        });\n      }\n    }\n  },\n  created() {\n    this.updateActiveTabBasedOnRoute();\n  },\n  beforeRouteUpdate(to, from, next) {\n    this.updateActiveTabBasedOnRoute();\n    next();\n  }\n};","map":{"version":3,"names":["MyApplications","MyAccounts","OrderDetails","data","activeTab","tabs","label","component","path","methods","navigateToOrder","item","existingTabIndex","findIndex","tab","includes","num","push","orderId","length","updateActiveTabBasedOnRoute","currentPath","$route","tabIndex","watch","newVal","selectedTab","$router","created","beforeRouteUpdate","to","from","next"],"sources":["src/components/AppTabs.vue"],"sourcesContent":["<template>\n  <v-app>\n    <div class=\"mx-16\">\n      <v-tabs v-model=\"activeTab\" background-color=\"transparent\" color=\"basil\" grow>\n        <v-tab v-for=\"tab in tabs\" :key=\"tab.label\">{{ tab.label }}</v-tab>\n      </v-tabs>\n\n      <v-tabs-items v-model=\"activeTab\">\n        <v-tab-item v-for=\"(tab, index) in tabs\" :key=\"index\">\n          <component :is=\"tab.component\" :data=\"tab.data\" @select-order=\"navigateToOrder\" />\n        </v-tab-item>\n      </v-tabs-items>\n    </div>\n  </v-app>\n</template>\n\n<script>\nimport MyApplications from '@/components/MyApplications.vue';\nimport MyAccounts from '@/components/MyAccounts.vue';\nimport OrderDetails from '@/components/OrderDetails.vue';\n\n\nexport default {\n  data() {\n    return {\n      activeTab: 0,\n      tabs: [\n        { label: 'Заявки', component: MyApplications, path: '/application' },\n        { label: 'Счета', component: MyAccounts, path: '/accounts' }\n      ],\n    };\n  },\n  methods: {\n    navigateToOrder(item) {\n      const existingTabIndex = this.tabs.findIndex(tab => tab.label.includes(item.num));\n      if (existingTabIndex !== -1) {\n        this.activeTab = existingTabIndex;\n      } else {\n        this.tabs.push({ label: 'Заявка ' + item.num, component: OrderDetails, path: '/application/' + item.orderId });\n        this.activeTab = this.tabs.length - 1;\n      }\n    },\n    updateActiveTabBasedOnRoute() {\n      const currentPath = this.$route.path;\n      const tabIndex = this.tabs.findIndex(tab => tab.path === currentPath);\n      if (tabIndex !== -1) {\n        this.activeTab = tabIndex;\n      }\n    }\n  },\n  watch: {\n    activeTab(newVal) {\n      const selectedTab = this.tabs[newVal];\n      if (selectedTab && selectedTab.path && this.$route.path !== selectedTab.path) {\n        this.$router.push({ path: selectedTab.path });\n      }\n    }\n  },\n  created() {\n    this.updateActiveTabBasedOnRoute();\n  },\n  beforeRouteUpdate(to, from, next) {\n    this.updateActiveTabBasedOnRoute();\n    next();\n  }\n};\n</script>\n"],"mappings":";AAiBA,OAAAA,cAAA;AACA,OAAAC,UAAA;AACA,OAAAC,YAAA;AAGA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,IAAA,GACA;QAAAC,KAAA;QAAAC,SAAA,EAAAP,cAAA;QAAAQ,IAAA;MAAA,GACA;QAAAF,KAAA;QAAAC,SAAA,EAAAN,UAAA;QAAAO,IAAA;MAAA;IAEA;EACA;EACAC,OAAA;IACAC,gBAAAC,IAAA;MACA,MAAAC,gBAAA,QAAAP,IAAA,CAAAQ,SAAA,CAAAC,GAAA,IAAAA,GAAA,CAAAR,KAAA,CAAAS,QAAA,CAAAJ,IAAA,CAAAK,GAAA;MACA,IAAAJ,gBAAA;QACA,KAAAR,SAAA,GAAAQ,gBAAA;MACA;QACA,KAAAP,IAAA,CAAAY,IAAA;UAAAX,KAAA,cAAAK,IAAA,CAAAK,GAAA;UAAAT,SAAA,EAAAL,YAAA;UAAAM,IAAA,oBAAAG,IAAA,CAAAO;QAAA;QACA,KAAAd,SAAA,QAAAC,IAAA,CAAAc,MAAA;MACA;IACA;IACAC,4BAAA;MACA,MAAAC,WAAA,QAAAC,MAAA,CAAAd,IAAA;MACA,MAAAe,QAAA,QAAAlB,IAAA,CAAAQ,SAAA,CAAAC,GAAA,IAAAA,GAAA,CAAAN,IAAA,KAAAa,WAAA;MACA,IAAAE,QAAA;QACA,KAAAnB,SAAA,GAAAmB,QAAA;MACA;IACA;EACA;EACAC,KAAA;IACApB,UAAAqB,MAAA;MACA,MAAAC,WAAA,QAAArB,IAAA,CAAAoB,MAAA;MACA,IAAAC,WAAA,IAAAA,WAAA,CAAAlB,IAAA,SAAAc,MAAA,CAAAd,IAAA,KAAAkB,WAAA,CAAAlB,IAAA;QACA,KAAAmB,OAAA,CAAAV,IAAA;UAAAT,IAAA,EAAAkB,WAAA,CAAAlB;QAAA;MACA;IACA;EACA;EACAoB,QAAA;IACA,KAAAR,2BAAA;EACA;EACAS,kBAAAC,EAAA,EAAAC,IAAA,EAAAC,IAAA;IACA,KAAAZ,2BAAA;IACAY,IAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}