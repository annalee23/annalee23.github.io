{"ast":null,"code":"import { mapMutations, mapState } from 'vuex';\nimport moment from 'moment';\nimport DialogDelete from './DialogDelete.vue';\nimport DialogEdit from './DialogEdit.vue';\nexport default {\n  components: {\n    DialogDelete,\n    DialogEdit\n  },\n  data() {\n    return {\n      menu2: false,\n      dialogDelete: false,\n      dialog: false,\n      dialogTitle: \"Создать заявку\",\n      headers: [{\n        text: '№ Заявки',\n        value: 'num'\n      }, {\n        text: 'Продукт',\n        value: 'stg'\n      }, {\n        text: 'Дата',\n        value: 'dadd'\n      }, {\n        text: 'Клиент',\n        value: 'client_name'\n      }, {\n        text: 'Статус',\n        value: 'state'\n      }, {\n        text: 'Телефон',\n        value: 'person_phone'\n      }, {\n        text: 'Действия',\n        value: 'actions',\n        sortable: false\n      }],\n      editedItem: {\n        num: 0,\n        stg: [],\n        dadd: moment().format('YYYY-MM-DD HH:mm'),\n        client_name: \"\",\n        state: \"init\",\n        person_phone: \"\"\n      },\n      editedIndex: -1\n    };\n  },\n  computed: {\n    ...mapState(['ordersList'])\n  },\n  methods: {\n    ...mapMutations(['addNewItem']),\n    formatDate(date) {\n      return moment(date).isValid() ? moment(date).format('DD.MM.YYYY HH:mm') : 'Invalid date';\n    },\n    statusClass(status) {\n      return {\n        'status-init': status === 'init',\n        'status-error': status === 'error',\n        'status-upload_docs': status === 'upload_docs',\n        'status-process': status === 'process',\n        'status-reupload_fls': status === 'reupload_fls'\n      };\n    },\n    selectOrder(orderId, num) {\n      this.$emit('select-order', {\n        orderId,\n        num\n      });\n    },\n    openAddDialog() {\n      this.$refs.dialogEdit.openAddDialog();\n    },\n    closeDialog() {\n      this.$emit('update:dialog', false);\n      this.editedItem = {\n        num: 0,\n        stg: [],\n        dadd: moment().format('YYYY-MM-DD HH:mm'),\n        client_name: \"\",\n        state: \"init\",\n        person_phone: \"\"\n      };\n      this.editedIndex = -1;\n    },\n    saveItem() {\n      this.$refs.dialogEdit.saveItem();\n    },\n    editItem(item) {\n      this.$refs.dialogEdit.editItem(item);\n    },\n    deleteItem(item) {\n      this.editedIndex = this.ordersList.indexOf(item);\n      this.dialogDelete = true;\n    },\n    deleteItemConfirm() {\n      this.ordersList.splice(this.editedIndex, 1);\n      this.closeDelete();\n    },\n    closeDelete() {\n      this.dialogDelete = false;\n    },\n    updateOrder({\n      index,\n      order\n    }) {\n      Object.assign(this.ordersList[index], order);\n    },\n    addOrder(order) {\n      this.addNewItem(order);\n    }\n  },\n  mounted() {\n    this.$store.dispatch('fetchOrdersList');\n  }\n};","map":{"version":3,"names":["mapMutations","mapState","moment","DialogDelete","DialogEdit","components","data","menu2","dialogDelete","dialog","dialogTitle","headers","text","value","sortable","editedItem","num","stg","dadd","format","client_name","state","person_phone","editedIndex","computed","methods","formatDate","date","isValid","statusClass","status","selectOrder","orderId","$emit","openAddDialog","$refs","dialogEdit","closeDialog","saveItem","editItem","item","deleteItem","ordersList","indexOf","deleteItemConfirm","splice","closeDelete","updateOrder","index","order","Object","assign","addOrder","addNewItem","mounted","$store","dispatch"],"sources":["src/components/MyApplications.vue"],"sourcesContent":["<template>\n  <div class=\"mx-1\">\n    <v-data-table :headers=\"headers\" :items=\"ordersList\" class=\"elevation-1\">\n      <template v-slot:top>\n        <v-toolbar flat>\n          <h2>Список заявок</h2>\n          <v-spacer></v-spacer>\n          <v-btn class=\"my-4\" color=\"primary\" @click=\"openAddDialog\">Добавить заявку</v-btn>\n          <DialogDelete :dialog=\"dialogDelete\" @close=\"closeDelete\" @confirm=\"deleteItemConfirm\" />\n        </v-toolbar>\n      </template>\n      <template #[`item.stg`]=\"{ item }\">\n        <span>{{ Array.isArray(item.stg) ? item.stg.join(', ') : item.stg }}</span>\n      </template>\n      <template #[`item.dadd`]=\"{ item }\">\n        <span>{{ formatDate(item.dadd) }}</span>\n      </template>\n      <template #[`item.state`]=\"{ item }\">\n        <span :class=\"statusClass(item.state)\">{{ item.state }}</span>\n      </template>\n      <template #[`item.num`]=\"{ item }\">\n        <div @click=\"selectOrder(item.id, item.num)\" style=\"cursor: pointer;\">\n          {{ item.num }}\n        </div>\n      </template>\n      <template #[`item.actions`]=\"{ item }\">\n        <v-icon small class=\"mr-2\" @click=\"editItem(item)\">\n          mdi-pencil\n        </v-icon>\n        <v-icon small @click=\"deleteItem(item)\">\n          mdi-delete\n        </v-icon>\n      </template>\n    </v-data-table>\n\n    <DialogEdit :dialog.sync=\"dialog\" :dialogTitle=\"dialogTitle\" :ordersList=\"ordersList\"\n      @update-order=\"updateOrder\" @add-order=\"addOrder\" />\n  </div>\n</template>\n\n<script>\nimport { mapMutations, mapState } from 'vuex';\nimport moment from 'moment';\nimport DialogDelete from './DialogDelete.vue';\nimport DialogEdit from './DialogEdit.vue';\n\nexport default {\n  components: {\n    DialogDelete,\n    DialogEdit\n  },\n  data() {\n    return {\n      menu2: false,\n      dialogDelete: false,\n      dialog: false,\n      dialogTitle: \"Создать заявку\",\n      headers: [\n        { text: '№ Заявки', value: 'num' },\n        { text: 'Продукт', value: 'stg' },\n        { text: 'Дата', value: 'dadd' },\n        { text: 'Клиент', value: 'client_name' },\n        { text: 'Статус', value: 'state' },\n        { text: 'Телефон', value: 'person_phone' },\n        { text: 'Действия', value: 'actions', sortable: false }\n      ],\n      editedItem: {\n        num: 0,\n        stg: [],\n        dadd: moment().format('YYYY-MM-DD HH:mm'),\n        client_name: \"\",\n        state: \"init\",\n        person_phone: \"\"\n      },\n      editedIndex: -1\n    };\n  },\n  computed: {\n    ...mapState(['ordersList']),\n  },\n  methods: {\n    ...mapMutations(['addNewItem']),\n    formatDate(date) {\n      return moment(date).isValid() ? moment(date).format('DD.MM.YYYY HH:mm') : 'Invalid date';\n    },\n    statusClass(status) {\n      return {\n        'status-init': status === 'init',\n        'status-error': status === 'error',\n        'status-upload_docs': status === 'upload_docs',\n        'status-process': status === 'process',\n        'status-reupload_fls': status === 'reupload_fls',\n      };\n    },\n    selectOrder(orderId, num) {\n      this.$emit('select-order', { orderId, num });\n    },\n    openAddDialog() {\n      this.$refs.dialogEdit.openAddDialog();\n    },\n    closeDialog() {\n      this.$emit('update:dialog', false);\n      this.editedItem = {\n        num: 0,\n        stg: [],\n        dadd: moment().format('YYYY-MM-DD HH:mm'),\n        client_name: \"\",\n        state: \"init\",\n        person_phone: \"\"\n      };\n      this.editedIndex = -1;\n    },\n    saveItem() {\n      this.$refs.dialogEdit.saveItem();\n    },\n    editItem(item) {\n      this.$refs.dialogEdit.editItem(item);\n    },\n    deleteItem(item) {\n      this.editedIndex = this.ordersList.indexOf(item);\n      this.dialogDelete = true;\n    },\n    deleteItemConfirm() {\n      this.ordersList.splice(this.editedIndex, 1);\n      this.closeDelete();\n    },\n    closeDelete() {\n      this.dialogDelete = false;\n    },\n    updateOrder({ index, order }) {\n      Object.assign(this.ordersList[index], order);\n    },\n    addOrder(order) {\n      this.addNewItem(order);\n    }\n  },\n  mounted() {\n    this.$store.dispatch('fetchOrdersList');\n  }\n};\n</script>\n\n\n<style scoped>\nh2 {\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.v-data-footer {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.v-data-footer__pagination,\n.v-data-footer__select {\n  margin-left: auto;\n}\n\n.status-init {\n  color: #ff6f00;\n  font-weight: bold;\n  padding: 5px;\n}\n\n.status-error {\n  color: #d32f2f;\n  font-weight: bold;\n  padding: 5px;\n}\n\n.status-upload_docs {\n  color: #0288d1;\n  font-weight: bold;\n  padding: 5px;\n}\n\n.status-process {\n  color: #388e3c;\n  font-weight: bold;\n  padding: 5px;\n}\n\n.status-reupload_fls {\n  color: #7b1fa2;\n  font-weight: bold;\n  padding: 5px;\n}\n\ntr:hover {\n  background-color: #f5f5f5;\n}\n</style>\n"],"mappings":"AAyCA,SAAAA,YAAA,EAAAC,QAAA;AACA,OAAAC,MAAA;AACA,OAAAC,YAAA;AACA,OAAAC,UAAA;AAEA;EACAC,UAAA;IACAF,YAAA;IACAC;EACA;EACAE,KAAA;IACA;MACAC,KAAA;MACAC,YAAA;MACAC,MAAA;MACAC,WAAA;MACAC,OAAA,GACA;QAAAC,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,KAAA;QAAAC,QAAA;MAAA,EACA;MACAC,UAAA;QACAC,GAAA;QACAC,GAAA;QACAC,IAAA,EAAAhB,MAAA,GAAAiB,MAAA;QACAC,WAAA;QACAC,KAAA;QACAC,YAAA;MACA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAvB,QAAA;EACA;EACAwB,OAAA;IACA,GAAAzB,YAAA;IACA0B,WAAAC,IAAA;MACA,OAAAzB,MAAA,CAAAyB,IAAA,EAAAC,OAAA,KAAA1B,MAAA,CAAAyB,IAAA,EAAAR,MAAA;IACA;IACAU,YAAAC,MAAA;MACA;QACA,eAAAA,MAAA;QACA,gBAAAA,MAAA;QACA,sBAAAA,MAAA;QACA,kBAAAA,MAAA;QACA,uBAAAA,MAAA;MACA;IACA;IACAC,YAAAC,OAAA,EAAAhB,GAAA;MACA,KAAAiB,KAAA;QAAAD,OAAA;QAAAhB;MAAA;IACA;IACAkB,cAAA;MACA,KAAAC,KAAA,CAAAC,UAAA,CAAAF,aAAA;IACA;IACAG,YAAA;MACA,KAAAJ,KAAA;MACA,KAAAlB,UAAA;QACAC,GAAA;QACAC,GAAA;QACAC,IAAA,EAAAhB,MAAA,GAAAiB,MAAA;QACAC,WAAA;QACAC,KAAA;QACAC,YAAA;MACA;MACA,KAAAC,WAAA;IACA;IACAe,SAAA;MACA,KAAAH,KAAA,CAAAC,UAAA,CAAAE,QAAA;IACA;IACAC,SAAAC,IAAA;MACA,KAAAL,KAAA,CAAAC,UAAA,CAAAG,QAAA,CAAAC,IAAA;IACA;IACAC,WAAAD,IAAA;MACA,KAAAjB,WAAA,QAAAmB,UAAA,CAAAC,OAAA,CAAAH,IAAA;MACA,KAAAhC,YAAA;IACA;IACAoC,kBAAA;MACA,KAAAF,UAAA,CAAAG,MAAA,MAAAtB,WAAA;MACA,KAAAuB,WAAA;IACA;IACAA,YAAA;MACA,KAAAtC,YAAA;IACA;IACAuC,YAAA;MAAAC,KAAA;MAAAC;IAAA;MACAC,MAAA,CAAAC,MAAA,MAAAT,UAAA,CAAAM,KAAA,GAAAC,KAAA;IACA;IACAG,SAAAH,KAAA;MACA,KAAAI,UAAA,CAAAJ,KAAA;IACA;EACA;EACAK,QAAA;IACA,KAAAC,MAAA,CAAAC,QAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}